//
//  StudentInformationModel.swift
//  On the Map
//
//  Created by leanne on 7/1/16.
//  Copyright Â© 2016 leanne63. All rights reserved.
//

import Foundation

struct StudentInformationModel {
	
	// MARK: - Constants
	
	/// Key for data representing the date when the student location was created.
	static let createdAtKey = "createdAt"
	/// Key for data representing the first name of the student which matches their Udacity profile first name.
	static let firstNameKey = "firstName"
	/// Key for data representing the last name of the student which matches their Udacity profile last name.
	static let lastNameKey = "lastName"
	/// Key for data representing the latitude of the student location (ranges from -90 to 90).
	static let latitudeKey = "latitude"
	/// Key for data representing the longitude of the student location (ranges from -180 to 180).
	static let longitudeKey = "longitude"
	/// Key for data representing the location string used for geocoding the student location.
	static let mapStringKey = "mapString"
	/// Key for data representing the URL provided by the student.
	static let mediaURLKey = "mediaURL"
	/// Key for data representing an auto-generated id/key generated by Parse which uniquely identifies a StudentLocation.
	static let objectIdKey = "objectId"
	/// Key for data representing an extra (optional) key used to uniquely identify a StudentLocation (fill with Udacity User ID).
	static let uniqueKeyKey = "uniqueKey"
	/// Key for data representing the date when the student location was last updated.
	static let updatedAtKey = "updatedAt"
	
	
	// MARK: - Properties
	
	/// Shared property to hold all student instances
	static var students = [StudentInformation]()
	
	/**
	
	Populates student information dictionary. (Replaces student dictionary, if one exists.)
	
	- parameter withStudents: dictionary of students to add
	
	*/
	static func populateStudentList(withStudents newStudents: [[String: AnyObject]]) {
	
		students.removeAll()
		
		for student in newStudents {
			
			let newStudent = StudentInformation(student)
			
			StudentInformationModel.students.append(newStudent)
		}
	}
	
	
	/**
	
	Checks to see if student exists in student information dictionary.
	
	- parameter uniqueKey: ID of student to find
	
	- returns: Student's current object ID, or nil if none present
	
	*/
	static func checkForStudentWithID(uniqueKey: String) -> String? {
		
		// shorthand for using a predicate: $0 represents each student from the
		//	 students array; 'contains' enumerates, looking for the provided value
		guard students.contains(where: {$0.uniqueKey == uniqueKey}) else {
			return nil
		}
		
		for student in students {
			if student.uniqueKey == uniqueKey {
				return student.objectId
			}
		}
		
		// if we're here, no matching students were found
		return nil
	}
	
	
	static func convertStudentInfoToParseDict(student: StudentInformation, includeMetaFields: Bool = true) -> [String: AnyObject] {
		
		var studentInfoDict = [String: AnyObject]()
		
		studentInfoDict[firstNameKey] = student.firstName as AnyObject?
		studentInfoDict[lastNameKey] = student.lastName as AnyObject?
		studentInfoDict[latitudeKey] = student.latitude as AnyObject?
		studentInfoDict[longitudeKey] = student.longitude as AnyObject?
		studentInfoDict[mapStringKey] = student.mapString as AnyObject?
		studentInfoDict[mediaURLKey] = student.mediaURL as AnyObject?
		studentInfoDict[uniqueKeyKey] = student.uniqueKey as AnyObject?
		
		if includeMetaFields {
			studentInfoDict[createdAtKey] = student.createdAt as AnyObject?
			studentInfoDict[objectIdKey] = student.objectId as AnyObject?
			studentInfoDict[updatedAtKey] = student.updatedAt as AnyObject?
		}
		
		
		
		return studentInfoDict
	}
}
